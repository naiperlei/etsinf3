(defglobal ?*nod-gen* = 0)
(defglobal ?*prof* = 60)
(deffacts mapa ; VARIABLES QUE TENDRE QUE CARGAR COMO HECHOS COMO (tamaño ?a ?)
	(tamaño 8 5)
	(hueco 2 1)
	(hueco 6 1)
	(hueco 8 1)
	(hueco 1 3)
	(hueco 1 5) 
	(hueco 4 3)
	(hueco 4 5)
	(hueco 7 5)
	(hueco 8 3)
	
	(juego pos 2 3 latas t 3 1 t 3 3 t 6 4 nivel 0)
)

(defrule derecha
	(juego pos ?x ?y latas $?z nivel ?n)
	(tamaño ?a ?) 			;cargamos la variable(HECHO) tamaño y miramos el valor a(componente x)
	(test (< ?x ?a))   		; comprueba que no me salgo de los limites
	(test (not (member$ (create$ t (+ ?x 1) ?y) $?z)))		;mira si no hay una lata a la derecha
	(not (hueco =(+ ?x 1) ?y )) 		;comprueba que no hay aun hueco en la en la derecha
	;PROF al SER variable GLOBAl no tengo que hacerla un HECHO
	(test (< ?n ?*prof*)) ;miro que no haya pasado la profundidad 
	=>
	(bind ?*nod-gen* (+ ?*nod-gen* 1)) ;asigna a node-gen = nodgen + 1
	(assert (juego pos (+ ?x 1) ?y latas ?z nivel (+ ?n 1)))
)

(defrule izquierda
	(juego pos ?x ?y latas $?z nivel ?n)
	(tamaño ?a ?)     ;cargamos la variable(HECHO) tamaño y miramos el valor a(componente x)
	(test (> ?x 1))    ; comprueba que no me slago de los limites
	(test (not (member$ (create$ t (- ?x 1) ?y) $?z)));mira si no hay una lata a la derecha
	(not (hueco =(- ?x 1) ?y )) ;comprueba que no haya un hueco en la en la derecha
	;PROF al SER variable GLOBAl no tengo que hacerla un HECHO
	(test (< ?n ?*prof*)) ;miro que no haya pasado la profundidad 
	=>
	(bind ?*nod-gen* (+ ?*nod-gen* 1))
	(assert (juego pos (- ?x 1) ?y latas ?z nivel (+ ?n 1)))
)
(defrule arriba
	(juego pos ?x ?y latas $?z nivel ?n)
	(tamaño ? ?a) ;cargamos la variable(HECHO) tamaño y miramos el valor a(componente y)
	(test (< ?y ?a))     ; comprueba que no me slago de los limites
	(test (not (member$ (create$ t ?x (+ ?y 1)) $?z)));mira si no hay una lata a la derecha
	(not (hueco ?x =(+ ?y 1) )) ;comprueba que no haya un hueco en la en la derecha
	;PROF al SER variable GLOBAl no tengo que hacerla un HECHO
	(test (< ?n ?*prof*)) ;miro que no haya pasado la profundidad 
	=>
	(bind ?*nod-gen* (+ ?*nod-gen* 1))
	(assert (juego pos ?x ( + ?y 1) latas ?z nivel (+ ?n 1)))
)
(defrule abajo
	(juego pos ?x ?y latas $?z nivel ?n) 
	(tamaño ? ?a) ;cargamos la variable(HECHO) tamaño y miramos el valor a(componente y)
	(test (> ?y 1)); comprueba que no me slago de los limites
	(test (not (member$ (create$ t ?x (- ?y 1)) $?z)));mira si no hay una lata a la derecha
	(not (hueco ?x =(- ?y 1) )) ;comprueba que no haya un hueco en la en la derecha
	;PROF al SER variable GLOBAl no tengo que hacerla un HECHO
	(test (< ?n ?*prof*)) ;miro que no haya pasado la profundidad
	=>
	(bind ?*nod-gen* (+ ?*nod-gen* 1))
	(assert (juego pos ?x ( - ?y 1) latas ?z nivel (+ ?n 1)))
)
(defrule empujarLataDerecha
	(juego pos ?x ?y latas $?u l ?lx ?y $?z nivel ?n)
	(tamaño ?a ?)
	(test (= ?lx (+ ?x 1)))
	(test (< ?lx ?a))
	(test (not (member$ (create$ t (+ ?lx 1) ?y) $?z)))
	(test (not(member$ (create$ t (+ ?lx 1) ?y) $?u)))
	(not (hueco =(+ ?lx 1) ?y ))
	(test (< ?n ?*prof*))
	 ;Mira que haya una lata al lado del Robot
	=>
	(bind ?*nod-gen* (+ ?*nod-gen* 1))
	(assert (juego pos (+ ?x 1) ?y latas $?u t (+ ?lx 1) ?y $?z nivel (+ ?n 1)))
)
(defrule empujarLataIzquierda
	(juego pos ?x ?y latas $?u t ?lx ?y $?z nivel ?n)
	(tamaño ?a ?)
	(test  (= ?lx (- ?x 1)))
	(test (> ?lx 1))
	(test (not(member$ (create$ t (- ?lx 1) ?y) $?z)))
	(test (not(member$ (create$ t (- ?lx 1) ?y) $?u)))
	(not (hueco =(- ?lx 1) ?y ))
	(test (< ?n ?*prof*))
	=>
	(bind ?*nod-gen* (+ ?*nod-gen* 1))
	(assert (juego pos (- ?x 1) ?y latas $?u t (- ?lx 1) ?y $?z nivel (+ ?n 1)))
)

(defrule empujarLataArriba
	(juego pos ?x ?y latas $?u t ?x ?ly $?z nivel ?n)
	(tamaño ? ?a)
	(test (< ?ly ?a))
	(test (not(member$ (create$ t ?x (+ ?ly 1)) $?z)))
	(test (not(member$ (create$ t ?x (+ ?ly 1)) $?u)))
	(not (hueco ?x =(+ ?ly 1)))
	(test  (= ?ly (+ ?y 1)))
	(test (< ?n ?*prof*))
	=>
	(bind ?*nod-gen* (+ ?*nod-gen* 1))
	(assert (juego pos ?x (+ ?y 1) latas $?u t ?x (+ ?ly 1) $?z nivel (+ ?n 1)))
)
(defrule empujarLataAbajo
	(juego pos ?x ?y latas $?u t ?x ?ly $?z nivel ?n)
	(tamaño ? ?a)
	(test  (= ?ly (- ?y 1)))
	(test (> ?ly 1))
	(test (not(member$ (create$ t ?x (- ?ly 1)) $?z))); no lata abajo
	(test (not(member$ (create$ t ?x (- ?ly 1)) $?u)))
	(not (hueco ?x =(- ?ly 1) )) ; no hueco abajo
	(test (< ?n ?*prof*))
	=>
	(bind ?*nod-gen* (+ ?*nod-gen* 1))
	(assert (juego pos ?x (- ?y 1) latas $?u t ?x (- ?ly 1) $?z nivel (+ ?n 1)))
)
(defrule MeterLataHuecoDerecha
	(juego pos ?x ?y latas $?u t ?lx ?y $?z nivel ?n)
	(test (= ?lx (+ ?x 1)))
	(hueco ?hx ?y )
	(test (= ?hx  (+ ?lx 1)))
	(test (< ?n ?*prof*))
	=>
	(bind ?*nod-gen* (+ ?*nod-gen* 1))
	(assert (juego pos (+ ?x 1) ?y latas $?u $?z nivel (+ ?n 1)))
)
(defrule MeterLataHuecoIzquierda
	(juego pos ?x ?y latas $?u t ?lx ?y $?z nivel ?n)
	(test (= ?lx (- ?x 1)))
	(hueco ?hx ?y )
	(test (= ?hx  (- ?lx 1)))
	(test (< ?n ?*prof*))
	=>
	(bind ?*nod-gen* (+ ?*nod-gen* 1))
	(assert (juego pos (- ?x 1)?y latas $?u $?z nivel (+ ?n 1)))
)
(defrule MeterLataHuecoArriba
	(juego pos ?x ?y latas $?u t ?x ?ly $?z nivel ?n)
	(test (= ?ly (+ ?y 1)))
	(hueco ?x ?hy )
	(test (= ?hy  (+ ?ly 1)))
	(test (< ?n ?*prof*))
	=>
	(bind ?*nod-gen* (+ ?*nod-gen* 1))
	(assert (juego pos ?x (+ ?y 1) latas $?u $?z nivel (+ ?n 1)))
)
(defrule MeterLataHuecoAbajo
	(juego pos ?x ?y latas $?u t ?x ?ly $?z nivel ?n)
	(test (= ?ly (- ?y 1)))
	(hueco ?x ?hy )
	(test (= ?hy  (- ?ly 1)))
	(test (< ?n ?*prof*))
	=>
	(bind ?*nod-gen* (+ ?*nod-gen* 1))
	(assert (juego pos ?x (- ?y 1) latas $?u $?z nivel (+ ?n 1)))
)



(defrule no_solucion
	(declare (salience -99))
	(juego pos $? latas $? nivel ?n )
	=>
	(printout t "SOLUCION NO ENCONTRADA" crlf)
	(printout t "NODOS GENERADOS: " ?*nod-gen* crlf)
	(halt)
)
(defrule objetivo
	(declare (salience 100))
	?f<-(juego pos ?a ?b latas nivel ?n )
	=>
	(printout t "SOLUCION ENCONTRADA EN EL NIVEL " ?n crlf)
	(printout t "NUM DE NODOS EXPANDIDOS O REGLAS DISPARADAS " ?n crlf)
	(printout t "HECHO OBJETIVO " ?f crlf)
	(halt)
)

(deffunction inicio ()
	(reset)
	(printout t "Profundidad Maxima:= " )
	(bind ?*prof* (read))	
	(printout t "Tipo de Búsqueda " crlf "1.- Anchura" crlf
		"2.- Profundidad" crlf )
	(bind ?a (read))
	(if (= ?a 1)
		then (set-strategy breadth)
		else (set-strategy depth)))
	(assert (profundidad-maxima ?*prof*))
	)
